{"meta":{"generator":"0.9.0","format":20,"date":1598867893907},"custom":{"examples":{"name":"Examples","files":{"ping":{"name":"Ping","type":"js","content":"'use strict'\n\n/**\n * A ping pong bot, whenever you send \"ping\", it replies \"pong\".\n */\n\n// Import the insta.js module\nconst Insta = require('@androz2091/insta.js')\n\n// Create an instance of a Instagram client\nconst client = new Insta.Client()\n\n/**\n * The connected event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Instagram\n */\nclient.on('connected', () => {\n    console.log('I am ready!')\n})\n\n// Create an event listener for messages\nclient.on('messageCreate', message => {\n    // If the message is \"ping\"\n    if (message.content === 'ping') {\n        // Reply \"pong\"\n        message.reply('pong')\n    }\n})\n\n// Log our bot in using Instagram credentials\nclient.login('your instagram username', 'your instagram password')\n","path":"docs/examples/ping.js"}}}},"classes":[{"name":"Attachment","construct":{"name":"Attachment","description":"Create an attachment for insta.js","params":[{"name":"data","description":"Attachment data","type":[[["string"]],[["Buffer"]]]}]},"props":[{"name":"data","description":"Attachment data","type":[[["string"]],[["Buffer"]]],"meta":{"line":15,"file":"Attachment.js","path":"src/structures"}},{"name":"file","description":"Attachment file","type":[[["Buffer"]]],"meta":{"line":20,"file":"Attachment.js","path":"src/structures"}}],"methods":[{"name":"_verify","description":"Verify the attachment and generate the file buffer","access":"private","meta":{"line":27,"file":"Attachment.js","path":"src/structures"}}],"meta":{"line":10,"file":"Attachment.js","path":"src/structures"}},{"name":"Chat","description":"Represents a chat between one or more users.","construct":{"name":"Chat","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"threadID","description":"The ID of the thread","type":[[["string"]]]},{"name":"data","description":"The data for the chat","type":[[["object"]]]}]},"props":[{"name":"client","description":"The client that instantiated this","type":[[["Client"]]],"meta":{"line":20,"file":"Chat.js","path":"src/structures"}},{"name":"id","description":"The ID of the chat","type":[[["string"]]],"meta":{"line":25,"file":"Chat.js","path":"src/structures"}},{"name":"messages","description":"The messages in the chat.","type":[[["Collection","<"],["string",", "],["Message",">"]]],"meta":{"line":30,"file":"Chat.js","path":"src/structures"}},{"name":"users","description":"The users in the chat.","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":35,"file":"Chat.js","path":"src/structures"}},{"name":"leftUsers","description":"The users that left the chat.","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":40,"file":"Chat.js","path":"src/structures"}},{"name":"typing","description":"Whether the client is typing in the chat.","type":[[["boolean"]]],"meta":{"line":45,"file":"Chat.js","path":"src/structures"}},{"name":"adminUserIDs","description":"The IDs of the administrators of the chat.","type":[[["Array","<"],["string",">"]]],"meta":{"line":83,"file":"Chat.js","path":"src/structures"}},{"name":"lastActivityAt","description":"The last time the chat was active.","type":[[["number"]]],"meta":{"line":88,"file":"Chat.js","path":"src/structures"}},{"name":"muted","description":"Whether the account has muted the chat.","type":[[["boolean"]]],"meta":{"line":93,"file":"Chat.js","path":"src/structures"}},{"name":"isPin","description":"Whether the account has pinned the chat.","type":[[["boolean"]]],"meta":{"line":98,"file":"Chat.js","path":"src/structures"}},{"name":"named","description":"Whether this chat has a specific name (otherwise it's the default name).","type":[[["boolean"]]],"meta":{"line":103,"file":"Chat.js","path":"src/structures"}},{"name":"name","description":"The name of the chat","type":[[["string"]]],"meta":{"line":108,"file":"Chat.js","path":"src/structures"}},{"name":"pending","description":"Whether the chat is waiting for the account approval.","type":[[["boolean"]]],"meta":{"line":113,"file":"Chat.js","path":"src/structures"}},{"name":"isGroup","description":"Whether the chat is a group.","type":[[["boolean"]]],"meta":{"line":118,"file":"Chat.js","path":"src/structures"}},{"name":"type","description":"The type of the chat.","type":[[["boolean"]]],"meta":{"line":123,"file":"Chat.js","path":"src/structures"}},{"name":"calling","description":"If a call is ongoing in this chat.","type":[[["boolean"]]],"meta":{"line":128,"file":"Chat.js","path":"src/structures"}}],"methods":[{"name":"approve","description":"Approve the chat if it's pending.","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":135,"file":"Chat.js","path":"src/structures"}},{"name":"markMessageSeen","description":"Mark a message of the chat as seen","params":[{"name":"messageID","description":"The ID of the message to mark as seen","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":148,"file":"Chat.js","path":"src/structures"}},{"name":"deleteMessage","description":"Delete a message of the chat","params":[{"name":"messageID","description":"The ID of the message to delete","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":157,"file":"Chat.js","path":"src/structures"}},{"name":"startTyping","description":"Start typing in the chat","params":[{"name":"options","description":"Options","optional":true,"type":[[["number"]]]},{"name":"options.time","description":"For how long the client should type","optional":true,"default":10000,"type":[[["number"]]]},{"name":"options.disableOnSend","description":"Whether the bot should stop typing when it sends a new message","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":177,"file":"Chat.js","path":"src/structures"}},{"name":"stopTyping","description":"Stop typing in the chat","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":192,"file":"Chat.js","path":"src/structures"}},{"name":"sendMessage","description":"Send a message in the chat","examples":["chat.sendMessage('hey!');"],"params":[{"name":"content","description":"The content of the message to send","type":[[["string"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":209,"file":"Chat.js","path":"src/structures"}},{"name":"sendVoice","description":"Send a voice message in the chat","examples":["const ytdl = require('ytdl-core');\n\nconst stream = ytdl('http://www.youtube.com/watch?v=A02s8omM_hI', { filter: format => format.container === 'mp4' });\nconst array = [];\nstream\n  .on('data', chunk => {\n    array.push(chunk);\n  })\n  .on('end', () => {\n    message.chat.sendVoice(Buffer.concat(array));\n  });"],"params":[{"name":"buffer","description":"The mp4 buffer to send","type":[[["Buffer"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":242,"file":"Chat.js","path":"src/structures"}},{"name":"sendPhoto","description":"Send a photo in the chat","examples":["chat.sendPhoto('https://via.placeholder.com/150');\nchat.sendPhoto('./cat.png');"],"params":[{"name":"attachment","description":"The photo to send","type":[[["string"]],[["Buffer"]],[["Attachment"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":264,"file":"Chat.js","path":"src/structures"}}],"meta":{"line":15,"file":"Chat.js","path":"src/structures"}},{"name":"Client","description":"Client, the main hub for interacting with the Instagram API.","extends":[[["EventEmitter"]]],"construct":{"name":"Client","params":[{"name":"options","type":[[["ClientOptions"]]]}]},"props":[{"name":"user","description":"The bot's user object.","type":[[["ClientUser"]]],"meta":{"line":32,"file":"Client.js","path":"src/structures"}},{"name":"ig","access":"private","type":[[["IgApiClient"]]],"meta":{"line":37,"file":"Client.js","path":"src/structures"}},{"name":"ready","description":"Whether the bot is connected and ready.","type":[[["boolean"]]],"meta":{"line":42,"file":"Client.js","path":"src/structures"}},{"name":"options","description":"The options for the client.","type":[[["ClientOptions"]]],"meta":{"line":47,"file":"Client.js","path":"src/structures"}},{"name":"cache","description":"The bot's cache.","type":[[["Cache"]]],"meta":{"line":60,"file":"Client.js","path":"src/structures"}}],"methods":[{"name":"_patchOrCreateUser","description":"Create a new user or patch the cache one with the payload","access":"private","params":[{"name":"userID","description":"The ID of the user to patch","type":[[["string"]]]},{"name":"userPayload","description":"The data of the user","type":[[["object"]]]}],"returns":[[["User"]]],"meta":{"line":77,"file":"Client.js","path":"src/structures"}},{"name":"createChat","description":"Create a chat (or return the existing one) between one (a dm chat) or multiple users (a group).","params":[{"name":"userIDs","description":"The users to include in the group","type":[[["Array","<"],["string",">"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Chat",">"]]],"description":"The created chat"},"meta":{"line":91,"file":"Client.js","path":"src/structures"}},{"name":"fetchChat","description":"Fetch a chat and cache it.","examples":["client.fetchChat('340282366841710300949128114477310087639').then((chat) => {\n  chat.send('Hey!');\n});"],"params":[{"name":"query","description":"The ID of the chat to fetch.","type":[[["string"]]]},{"name":"force","description":"Whether the cache should be ignored","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["Chat",">"]]],"meta":{"line":109,"file":"Client.js","path":"src/structures"}},{"name":"fetchUser","description":"Fetch a user and cache it.","examples":["client.fetchUser('pronote_bot').then((user) => {\n  user.follow();\n});"],"params":[{"name":"query","description":"The ID or the username of the user to fetch.","type":[[["string"]]]},{"name":"force","description":"Whether the cache should be ignored","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":134,"file":"Client.js","path":"src/structures"}},{"name":"handleRealtimeReceive","description":"Handle Realtime messages","access":"private","params":[{"name":"topic","type":[[["object"]]]},{"name":"payload","type":[[["object"]]]}],"meta":{"line":155,"file":"Client.js","path":"src/structures"}},{"name":"handleFbnsReceive","description":"Handle FBNS messages","access":"private","params":[{"name":"data","type":[[["object"]]]}],"async":true,"meta":{"line":303,"file":"Client.js","path":"src/structures"}},{"name":"logout","description":"Log the bot out from Instagram","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":340,"file":"Client.js","path":"src/structures"}},{"name":"login","description":"Log the bot in to Instagram","params":[{"name":"username","description":"The username of the Instagram account.","type":[[["string"]]]},{"name":"password","description":"The password of the Instagram account.","type":[[["string"]]]},{"name":"state","description":"Optional state object. It can be generated using client.ig.exportState().","optional":true,"type":[[["object"]]]}],"async":true,"meta":{"line":350,"file":"Client.js","path":"src/structures"}}],"events":[{"name":"messageCreate","description":"Emitted when a message is sent in a chat the bot is in","params":[{"name":"message","description":"The message that was sent","type":[[["Message"]]]}],"meta":{"line":417,"file":"Client.js","path":"src/structures"}},{"name":"messageDelete","description":"Emitted when a message is deleted in a chat the bot is in","params":[{"name":"message","description":"The message that was deleted","type":[[["Message"]]]}],"meta":{"line":423,"file":"Client.js","path":"src/structures"}},{"name":"likeAdd","description":"Emitted when a user adds a like to a message","params":[{"name":"user","description":"The user who added the like","type":[[["User"]]]},{"name":"message","description":"The message on which the like was added","type":[[["Message"]]]}],"meta":{"line":429,"file":"Client.js","path":"src/structures"}},{"name":"likeRemove","description":"Emitted when a user removes a like from a message","params":[{"name":"user","description":"The user who removed the like","type":[[["User"]]]},{"name":"message","description":"The message on which the like was removed","type":[[["Message"]]]}],"meta":{"line":436,"file":"Client.js","path":"src/structures"}},{"name":"newFollower","description":"Emitted when someone starts following the bot","params":[{"name":"user","description":"The user that started following the bot","type":[[["User"]]]}],"meta":{"line":443,"file":"Client.js","path":"src/structures"}},{"name":"followRequest","description":"Emitted when someone wants to follow the bot","params":[{"name":"user","description":"The user who wants to follow the bot","type":[[["User"]]]}],"meta":{"line":449,"file":"Client.js","path":"src/structures"}},{"name":"pendingRequest","description":"Emitted when someone wants to send a message to the bot","params":[{"name":"chat","description":"The chat that needs to be approved","type":[[["Chat"]]]}],"meta":{"line":455,"file":"Client.js","path":"src/structures"}},{"name":"chatNameUpdate","description":"Emitted when the name of a chat changes","params":[{"name":"chat","description":"The chat whose name has changed","type":[[["Chat"]]]},{"name":"oldName","description":"The previous name of the chat","type":[[["string"]]]},{"name":"newName","description":"The new name of the chat","type":[[["string"]]]}],"meta":{"line":461,"file":"Client.js","path":"src/structures"}},{"name":"chatUserAdd","description":"Emitted when a user is added to a chat","params":[{"name":"chat","description":"The chat in which the user has been added","type":[[["Chat"]]]},{"name":"user","description":"The user who has been added","type":[[["User"]]]}],"meta":{"line":469,"file":"Client.js","path":"src/structures"}},{"name":"chatUserRemove","description":"Emitted when a user is removed from a chat","params":[{"name":"chat","description":"The chat from which the user has been removed","type":[[["Chat"]]]},{"name":"user","description":"The user who has been removed","type":[[["User"]]]}],"meta":{"line":476,"file":"Client.js","path":"src/structures"}},{"name":"chatAdminAdd","description":"Emitted when a user becomes an administrator in a chat","params":[{"name":"chat","description":"The chat in which the user has become an administrator","type":[[["Chat"]]]},{"name":"user","description":"The user who has become admin","type":[[["User"]]]}],"meta":{"line":483,"file":"Client.js","path":"src/structures"}},{"name":"callStart","description":"Emitted when a call starts in a chat","params":[{"name":"chat","description":"The chat in which the call has started","type":[[["Chat"]]]}],"meta":{"line":490,"file":"Client.js","path":"src/structures"}},{"name":"callEnd","description":"Emitted when a call ends in a chat","params":[{"name":"chat","description":"The chat in which the call has ended","type":[[["Chat"]]]}],"meta":{"line":496,"file":"Client.js","path":"src/structures"}}],"meta":{"line":26,"file":"Client.js","path":"src/structures"}},{"name":"ClientUser","description":"Represents the logged in client's Instagram user.","extends":[[["User"]]],"construct":{"name":"ClientUser","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the client user.","type":[[["object"]]]}]},"props":[{"name":"allowContactsSync","description":"Whether the user has enabled contact synchronization","type":[[["boolean"]]],"meta":{"line":23,"file":"ClientUser.js","path":"src/structures"}},{"name":"phoneNumber","description":"The phone number of the user","type":[[["string"]]],"meta":{"line":28,"file":"ClientUser.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","type":[[["Client"]]],"meta":{"line":16,"file":"User.js","path":"src/structures"}},{"name":"id","description":"The ID of the user","type":[[["string"]]],"meta":{"line":21,"file":"User.js","path":"src/structures"}},{"name":"followers","description":"Collection of users that follow this user.<info>You have to use user.fetchFollowers() to fill the collection</info>","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":27,"file":"User.js","path":"src/structures"}},{"name":"following","description":"Collection of users this user follows.<info>You have to use user.fetchFollowing() to fill the collection</info>","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":33,"file":"User.js","path":"src/structures"}},{"name":"privateChat","description":"Private chat between the client and the user.","type":[[["Chat"]]],"meta":{"line":42,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the user","type":[[["string"]]],"meta":{"line":51,"file":"User.js","path":"src/structures"}},{"name":"fullName","description":"The full name of the user","type":[[["string"]]],"meta":{"line":56,"file":"User.js","path":"src/structures"}},{"name":"isPrivate","description":"Whether the user is private","type":[[["boolean"]]],"meta":{"line":61,"file":"User.js","path":"src/structures"}},{"name":"isVerified","description":"Whether the user is verified","type":[[["boolean"]]],"meta":{"line":66,"file":"User.js","path":"src/structures"}},{"name":"isBusiness","description":"Whether the user is a business profile","type":[[["boolean"]]],"meta":{"line":71,"file":"User.js","path":"src/structures"}},{"name":"avatarURL","description":"The URL of the user's avatar","type":[[["string"]]],"meta":{"line":76,"file":"User.js","path":"src/structures"}},{"name":"biography","description":"The biography of the user","nullable":true,"type":[[["string"]]],"meta":{"line":81,"file":"User.js","path":"src/structures"}},{"name":"mediaCount","description":"The number of media published by the user","nullable":true,"type":[[["number"]]],"meta":{"line":86,"file":"User.js","path":"src/structures"}},{"name":"followerCount","description":"The number of followers of the user","nullable":true,"type":[[["number"]]],"meta":{"line":91,"file":"User.js","path":"src/structures"}},{"name":"followingCount","description":"The number of followed users by the user","nullable":true,"type":[[["number"]]],"meta":{"line":96,"file":"User.js","path":"src/structures"}},{"name":"totalIgtvVideos","description":"The number of videos published by IGTV","nullable":true,"type":[[["number"]]],"meta":{"line":101,"file":"User.js","path":"src/structures"}}],"methods":[{"name":"setBiography","description":"Change the bot's biography","params":[{"name":"content","description":"The new biography","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"The new biography"},"meta":{"line":45,"file":"ClientUser.js","path":"src/structures"}},{"name":"fetch","description":"Fetch the user to access all the properties","inherits":"User#fetch","inherited":true,"async":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":108,"file":"User.js","path":"src/structures"}},{"name":"fetchPrivateChat","description":"Fetch (or create) a private chat between the client and the user.","inherits":"User#fetchPrivateChat","inherited":true,"examples":["// Send a message to @selenagomez\nconst user = await client.fetchUser('selenagomez');\n// Use fetchPrivateChat() as I've never sent a message to this account\nif(!user.privateChat) await user.fetchPrivateChat();\n// Then I can use User#privateChat\nuser.privateChat.sendPhoto('https://picsum.photos/536/354');"],"async":true,"returns":[[["Promise","<"],["Chat",">"]]],"meta":{"line":124,"file":"User.js","path":"src/structures"}},{"name":"fetchFollowers","description":"Fetch the users that follow this user","inherits":"User#fetchFollowers","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"meta":{"line":134,"file":"User.js","path":"src/structures"}},{"name":"fetchFollowing","description":"Fetch the users that follow this user","inherits":"User#fetchFollowing","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"meta":{"line":146,"file":"User.js","path":"src/structures"}},{"name":"follow","description":"Start following a user","inherits":"User#follow","inherited":true,"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":158,"file":"User.js","path":"src/structures"}},{"name":"unfollow","description":"Stop following a user","inherits":"User#unfollow","inherited":true,"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":166,"file":"User.js","path":"src/structures"}},{"name":"block","description":"Block a user","inherits":"User#block","inherited":true,"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":174,"file":"User.js","path":"src/structures"}},{"name":"unblock","description":"Unblock a user","inherits":"User#unblock","inherited":true,"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":182,"file":"User.js","path":"src/structures"}},{"name":"approveFollow","description":"Approve follow request","inherits":"User#approveFollow","inherited":true,"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":190,"file":"User.js","path":"src/structures"}},{"name":"denyFollow","description":"Reject follow request","inherits":"User#denyFollow","inherited":true,"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":198,"file":"User.js","path":"src/structures"}},{"name":"removeFollower","description":"Remove the user from your followers","inherits":"User#removeFollower","inherited":true,"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":206,"file":"User.js","path":"src/structures"}},{"name":"send","description":"Send a message to the user","inherits":"User#send","inherited":true,"params":[{"name":"content","description":"The content of the message to send","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":215,"file":"User.js","path":"src/structures"}}],"meta":{"line":12,"file":"ClientUser.js","path":"src/structures"}},{"name":"Message","description":"Represents a Message","construct":{"name":"Message","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"threadID","description":"The ID of the thread","type":[[["string"]]]},{"name":"data","description":"The data for the message","type":[[["object"]]]}]},"props":[{"name":"client","description":"The client that instantiated this","type":[[["Client"]]],"meta":{"line":17,"file":"Message.js","path":"src/structures"}},{"name":"id","description":"The ID of the message","type":[[["string"]]],"meta":{"line":22,"file":"Message.js","path":"src/structures"}},{"name":"chatID","description":"The ID of the chat the message was sent in","type":[[["string"]]],"meta":{"line":27,"file":"Message.js","path":"src/structures"}},{"name":"type","description":"The type of the message, either:* `text` - a simple message* `media` - a photo, a file, a GIF or a sticker* `voice_media` - a voice message* `story_share` - a story share message","type":[[["string"]]],"meta":{"line":36,"file":"Message.js","path":"src/structures"}},{"name":"timestamp","description":"The timestamp the message was sent at","type":[[["number"]]],"meta":{"line":41,"file":"Message.js","path":"src/structures"}},{"name":"authorID","description":"The ID of the user who sent the message","type":[[["string"]]],"meta":{"line":46,"file":"Message.js","path":"src/structures"}},{"name":"storyShareData","description":"The data concerning the shared story","nullable":true,"type":[[["StoryShareData"]]],"meta":{"line":66,"file":"Message.js","path":"src/structures"}},{"name":"mediaData","description":"The data concerning the media","nullable":true,"type":[[["MessageMediaData"]]],"meta":{"line":85,"file":"Message.js","path":"src/structures"}},{"name":"voiceData","description":"The data concerning the voice","nullable":true,"type":[[["MessageVoiceData"]]],"meta":{"line":117,"file":"Message.js","path":"src/structures"}},{"name":"chat","description":"The chat the message was sent in","type":[[["Chat"]]],"meta":{"line":135,"file":"Message.js","path":"src/structures"}},{"name":"author","description":"The author of the message","type":[[["User"]]],"meta":{"line":143,"file":"Message.js","path":"src/structures"}},{"name":"likes","description":"The likes on this message","type":[[["Array","<"],["MessageLike",">"]]],"meta":{"line":158,"file":"Message.js","path":"src/structures"}}],"methods":[{"name":"createMessageCollector","description":"Create a message collector in this chat","params":[{"name":"options","description":"The options for the collector","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":171,"file":"Message.js","path":"src/structures"}},{"name":"markSeen","description":"Mark the message as seen.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":180,"file":"Message.js","path":"src/structures"}},{"name":"delete","description":"Delete the message","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":188,"file":"Message.js","path":"src/structures"}},{"name":"reply","description":"Reply to the message","params":[{"name":"content","description":"The content of the message","type":[[["string"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":197,"file":"Message.js","path":"src/structures"}}],"meta":{"line":12,"file":"Message.js","path":"src/structures"}},{"name":"MessageCollector","description":"Collects messages in a chat","extends":[[["EventEmitter"]]],"construct":{"name":"MessageCollector","params":[{"name":"chat","description":"The chat in which the messages should be collected","type":[[["Chat"]]]},{"name":"options","description":"The options for the collector","type":[[["MessageCollectorOptions"]]]}]},"props":[{"name":"client","description":"The client that instantiated this","type":[[["Client"]]],"meta":{"line":23,"file":"MessageCollector.js","path":"src/structures"}},{"name":"chat","description":"The chat in which the messages should be collected","type":[[["Chat"]]],"meta":{"line":28,"file":"MessageCollector.js","path":"src/structures"}},{"name":"filter","description":"The filter to apply","type":[[["function"]]],"meta":{"line":33,"file":"MessageCollector.js","path":"src/structures"}},{"name":"idle","description":"How long to stop the collector after inactivity in milliseconds","type":[[["number"]]],"meta":{"line":38,"file":"MessageCollector.js","path":"src/structures"}},{"name":"ended","description":"Whether this collector is ended","type":[[["boolean"]]],"meta":{"line":45,"file":"MessageCollector.js","path":"src/structures"}}],"methods":[{"name":"end","description":"End the collector","params":[{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"async":true,"meta":{"line":68,"file":"MessageCollector.js","path":"src/structures"}}],"events":[{"name":"message","description":"Emitted when a message is collected by the collector","params":[{"name":"message","description":"The collected message","type":[[["Message"]]]}],"meta":{"line":88,"file":"MessageCollector.js","path":"src/structures"}},{"name":"end","description":"Emitted when the collector ends","params":[{"name":"reason","description":"The reason the collector ended","type":[[["Message"]]]}],"meta":{"line":94,"file":"MessageCollector.js","path":"src/structures"}}],"meta":{"line":17,"file":"MessageCollector.js","path":"src/structures"}},{"name":"User","description":"Represents a User","construct":{"name":"User","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the user","type":[[["object"]]]}]},"props":[{"name":"client","description":"The client that instantiated this","type":[[["Client"]]],"meta":{"line":16,"file":"User.js","path":"src/structures"}},{"name":"id","description":"The ID of the user","type":[[["string"]]],"meta":{"line":21,"file":"User.js","path":"src/structures"}},{"name":"followers","description":"Collection of users that follow this user.<info>You have to use user.fetchFollowers() to fill the collection</info>","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":27,"file":"User.js","path":"src/structures"}},{"name":"following","description":"Collection of users this user follows.<info>You have to use user.fetchFollowing() to fill the collection</info>","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":33,"file":"User.js","path":"src/structures"}},{"name":"privateChat","description":"Private chat between the client and the user.","type":[[["Chat"]]],"meta":{"line":42,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the user","type":[[["string"]]],"meta":{"line":51,"file":"User.js","path":"src/structures"}},{"name":"fullName","description":"The full name of the user","type":[[["string"]]],"meta":{"line":56,"file":"User.js","path":"src/structures"}},{"name":"isPrivate","description":"Whether the user is private","type":[[["boolean"]]],"meta":{"line":61,"file":"User.js","path":"src/structures"}},{"name":"isVerified","description":"Whether the user is verified","type":[[["boolean"]]],"meta":{"line":66,"file":"User.js","path":"src/structures"}},{"name":"isBusiness","description":"Whether the user is a business profile","type":[[["boolean"]]],"meta":{"line":71,"file":"User.js","path":"src/structures"}},{"name":"avatarURL","description":"The URL of the user's avatar","type":[[["string"]]],"meta":{"line":76,"file":"User.js","path":"src/structures"}},{"name":"biography","description":"The biography of the user","nullable":true,"type":[[["string"]]],"meta":{"line":81,"file":"User.js","path":"src/structures"}},{"name":"mediaCount","description":"The number of media published by the user","nullable":true,"type":[[["number"]]],"meta":{"line":86,"file":"User.js","path":"src/structures"}},{"name":"followerCount","description":"The number of followers of the user","nullable":true,"type":[[["number"]]],"meta":{"line":91,"file":"User.js","path":"src/structures"}},{"name":"followingCount","description":"The number of followed users by the user","nullable":true,"type":[[["number"]]],"meta":{"line":96,"file":"User.js","path":"src/structures"}},{"name":"totalIgtvVideos","description":"The number of videos published by IGTV","nullable":true,"type":[[["number"]]],"meta":{"line":101,"file":"User.js","path":"src/structures"}}],"methods":[{"name":"fetch","description":"Fetch the user to access all the properties","async":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":108,"file":"User.js","path":"src/structures"}},{"name":"fetchPrivateChat","description":"Fetch (or create) a private chat between the client and the user.","examples":["// Send a message to @selenagomez\nconst user = await client.fetchUser('selenagomez');\n// Use fetchPrivateChat() as I've never sent a message to this account\nif(!user.privateChat) await user.fetchPrivateChat();\n// Then I can use User#privateChat\nuser.privateChat.sendPhoto('https://picsum.photos/536/354');"],"async":true,"returns":[[["Promise","<"],["Chat",">"]]],"meta":{"line":124,"file":"User.js","path":"src/structures"}},{"name":"fetchFollowers","description":"Fetch the users that follow this user","async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"meta":{"line":134,"file":"User.js","path":"src/structures"}},{"name":"fetchFollowing","description":"Fetch the users that follow this user","async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["User",">>"]]],"meta":{"line":146,"file":"User.js","path":"src/structures"}},{"name":"follow","description":"Start following a user","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":158,"file":"User.js","path":"src/structures"}},{"name":"unfollow","description":"Stop following a user","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":166,"file":"User.js","path":"src/structures"}},{"name":"block","description":"Block a user","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":174,"file":"User.js","path":"src/structures"}},{"name":"unblock","description":"Unblock a user","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":182,"file":"User.js","path":"src/structures"}},{"name":"approveFollow","description":"Approve follow request","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":190,"file":"User.js","path":"src/structures"}},{"name":"denyFollow","description":"Reject follow request","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":198,"file":"User.js","path":"src/structures"}},{"name":"removeFollower","description":"Remove the user from your followers","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":206,"file":"User.js","path":"src/structures"}},{"name":"send","description":"Send a message to the user","params":[{"name":"content","description":"The content of the message to send","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":215,"file":"User.js","path":"src/structures"}}],"meta":{"line":11,"file":"User.js","path":"src/structures"}}],"interfaces":[],"typedefs":[{"name":"ClientOptions","type":[[["object"]]],"props":[{"name":"disableReplyPrefix","description":"Whether the bot should disable user mention for the Message#reply() method","type":[[["boolean"]]]}],"meta":{"line":19,"file":"Client.js","path":"src/structures"}},{"name":"Cache","type":[[["Object"]]],"props":[{"name":"messages","description":"The bot's messages cache.","type":[[["Collection","<"],["string",", "],["Message",">"]]]},{"name":"users","description":"The bot's users cache.","type":[[["Collection","<"],["string",", "],["User",">"]]]},{"name":"chats","description":"The bot's chats cache.","type":[[["Collection","<"],["string",", "],["Chat",">"]]]},{"name":"pendingChats","description":"The bot's pending chats cache.","type":[[["Collection","<"],["string",", "],["Chat",">"]]]}],"meta":{"line":49,"file":"Client.js","path":"src/structures"}},{"name":"StoryShareData","type":[[["object"]]],"props":[{"name":"author","description":"The user who made the story","type":[[["User"]]]},{"name":"sourceURL","description":"The url of the story's image/video","type":[[["string"]]]}],"meta":{"line":57,"file":"Message.js","path":"src/structures"}},{"name":"MessageMediaData","type":[[["object"]]],"props":[{"name":"isLike","description":"Whether the media is a like (mediaData.url will be `null`)","type":[[["boolean"]]]},{"name":"isAnimated","description":"Whether the media is animated","type":[[["boolean"]]]},{"name":"isSticker","description":"Whether the media is a sticker","type":[[["boolean"]]]},{"name":"isRandom","description":"Whether the media was chosen randomly","type":[[["boolean"]]]},{"name":"url","description":"The URL of the media","nullable":true,"type":[[["string"]]]}],"meta":{"line":73,"file":"Message.js","path":"src/structures"}},{"name":"MessageVoiceData","type":[[["object"]]],"props":[{"name":"duration","description":"The duration (in milliseconds) of the voice message.","type":[[["number"]]]},{"name":"sourceURL","description":"The URL to retrieve the file that contains the voice message.","type":[[["string"]]]}],"meta":{"line":108,"file":"Message.js","path":"src/structures"}},{"name":"MessageLike","type":[[["object"]]],"props":[{"name":"userID","description":"The user who added the like to the message","type":[[["string"]]]},{"name":"timestamp","description":"The time the user added the like","type":[[["number"]]]}],"meta":{"line":148,"file":"Message.js","path":"src/structures"}},{"name":"MessageCollectorOptions","type":[[["object"]]],"props":[{"name":"filter","description":"The filter to apply","type":[[["function"]]]},{"name":"idle","description":"How long to stop the collector after inactivity in milliseconds","type":[[["number"]]]}],"meta":{"line":8,"file":"MessageCollector.js","path":"src/structures"}}],"externals":[]}